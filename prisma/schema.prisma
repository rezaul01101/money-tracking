// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int             @id @default(autoincrement())
  name           String?
  email          String          @unique
  image          String?
  password       String
  categories     Category[]
  transactions   Transaction[]
  paymentmethods PaymentMethod[]
  settings       UserSetting[]
  budgets        Budget[]
  deletedAt      DateTime?       @map(name: "deleted_at")
  createdAt      DateTime        @default(now()) @map(name: "created_at")
  updatedAt      DateTime?       @updatedAt @map(name: "updated_at")

  @@map("users")
}

model Category {
  id           Int             @id @default(autoincrement())
  name         String
  user         User            @relation(fields: [user_id], references: [id])
  budgets      Budget[]
  transactions Transaction[]
  user_id      Int
  type         TransactionType
  deletedAt    DateTime?       @map(name: "deleted_at")
  createdAt    DateTime        @default(now()) @map(name: "created_at")
  updatedAt    DateTime?       @updatedAt @map(name: "updated_at")

  @@map("categories")
}

model PaymentMethod {
  id            Int           @id @default(autoincrement())
  name          String
  nameLocalized String? // Optional, as it's not marked required in the UI
  type          PaymentType
  user          User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id       Int
  transactions  Transaction[]
  code          String? // Optional, not required in the UI
  initialAmount Float         @default(0.0)
  status        String        @default("1") // Based on status cards like "Active" in UI
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Transaction {
  id                Int             @id @default(autoincrement())
  user              User            @relation(fields: [user_id], references: [id])
  user_id           Int
  category          Category        @relation(fields: [category_id], references: [id])
  category_id       Int
  paymentMethod     PaymentMethod   @relation(fields: [payment_method_id], references: [id])
  payment_method_id Int
  amount            Decimal
  type              TransactionType
  date              DateTime        @default(now())
  notes             String? // Optional field for additional details
  deletedAt         DateTime?       @map(name: "deleted_at")
  createdAt         DateTime        @default(now()) @map(name: "created_at")
  updatedAt         DateTime?       @updatedAt @map(name: "updated_at")

  @@map("transactions")
}

model Budget {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [user_id], references: [id])
  user_id     Int
  category    Category  @relation(fields: [category_id], references: [id])
  category_id Int
  amount      Decimal
  startDate   DateTime
  endDate     DateTime
  notes       String?
  deletedAt   DateTime? @map(name: "deleted_at")
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  updatedAt   DateTime? @updatedAt @map(name: "updated_at")

  @@map("budgets")
}

model UserSetting {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id   Int
  key       String
  value     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([user_id, key])
}

enum TransactionType {
  INCOME
  EXPENSE
  SAVING
  INVESTMENT
}

enum PaymentType {
  Cash
  Card
  GiftCard
  ThirdParty
  MobilePay
  Other
  BankTransfer
  HouseAccount
}
